-- PostgreSQL Exercises
-- https://pgexercises.com/questions/aggregates

/*
====================================================================================
Aggregates
====================================================================================
*/

/*
Rankmembers
====================================================================================
Produce a list of members (including guests), along with the number of hours
they've booked in facilities, rounded to the nearest ten hours. Rank them by this
rounded figure, producing output of first name, surname, rounded hours, rank.
Sort by rank, surname, and first name.
*/

-- My answer:
select
    mbs.firstname,
		mbs.surname,
		round(sum(bks.slots*.5),-1) as hours, -- Their answer didn't like this,
                                          -- but the round(*whatever*,-1) will
                                          -- take it to the closest 10s,
                                          -- they used math instead
		rank() over (order by sum(bks.slots) desc) as rank
	from cd.bookings as bks
	inner join cd.members as mbs
		on bks.memid = mbs.memid
	group by mbs.memid
	order by rank, mbs.surname, mbs.firstname
;

-- Their answer:
select
    firstname,
    surname,
    ((sum(bks.slots)+10)/20)*10) as hours,
    rank() over (order by ((sum(bks.slots)+10)/20)*10 desc) as rank
    from cd.bookings bks
    inner join cd.members mems
        on bks.memid = mems.memid
    group by mems.memid
order by rank, surname, firstname
;


/*
Facrev3
====================================================================================
Produce a list of the top three revenue generating facilities (including ties).
Output facility name and rank, sorted by rank and facility name.
*/

-- My answer:
select
    name,
    rank from (
        select
            fcs.name as name,
            rank() over (order by sum(case
                                      when bks.memid = 0 then bks.slots*fcs.guestcost
                                      else bks.slots*fcs.membercost
                                      end) desc) as rank
          from cd.bookings bks
          inner join cd.facilities fcs
              on bks.facid = fcs.facid
          group by fcs.name) as subq
  where rank <= 3
  order by rank
;

/*
Classify
====================================================================================
Classify facilities into equally sized groups of high, average,
and low based on their revenue. Order by classification and facility name.
*/

-- My answer:
select
    name,
    revenue from ( -- I'm missing a case function to create the bucket names
      select
          fcs.name as name,
          ntile(3) over (order by sum(case
                                    when bks.memid = 0 then bks.slots*fcs.guestcost
                                    else bks.slots*fcs.membercost
                                    end) desc) as revenue
        from cd.bookings bks
        inner join cd.facilities fcs
            on bks.facid = fcs.facid
        group by fcs.name) as subq
    order by revenue
;

-- Their answer:
select
    name,
    case
        when class=1 then 'high'
        when class=2 then 'average'
        when class=3 then 'low'
        end
    revenue from (
      select
          fcs.name as name,
          ntile(3) over (order by sum(case
                                    when bks.memid = 0 then bks.slots*fcs.guestcost
                                    else bks.slots*fcs.membercost
                                    end) desc) as class
        from cd.bookings bks
        inner join cd.facilities fcs
            on bks.facid = fcs.facid
        group by fcs.name) as subq
    order by class, name
;


/*
Payback
====================================================================================
Based on the 3 complete months of data so far, calculate the amount of time each
facility will take to repay its cost of ownership. Remember to take into account
ongoing monthly maintenance. Output facility name and payback time in months,
order by facility name. Don't worry about differences in month lengths, we're
only looking for a rough value here!
*/

-- Notes
-- Payback: Total Revenue - Maintenance Costs = Initial Outlay
-- Total Revenue: sum(memberSlots*memberCost) + sum(guestSlots*guestCost)
-- Total Revenue Equation:
sum(slots * case
					when memid = 0 then fcs.guestcost
					else fcs.membercost
					end)
			as revenue
-- Maintenance Costs: monthlyMaintenance * numberOfMonths

-- My answer:
select
    fcs.name,
    fcs.initialoutlay/ ((sum(slots * case
		                                 when memid = 0 then fcs.guestcost
					                           else fcs.membercost
					                           end)
			  - fcs.monthlymaintenance)/3) as months -- hard coded number of months
  from cd.bookings bks
  inner join cd.facilities fcs
    on bks.facid = fcs.facid
  group by fcs.facid
  order by fcs.name
;

-- Cleaner answer:
-- (still hard codes the date though)
select
    name,
    initialOutlay / (monthlyRevenue - monthlyMaintenance) as repayTime
    from (
        select
            fcs.name as name,
            fcs.initialoutlay as initialOutlay,
            fcs.monthlymaintenance as monthlyMaintenance,
            sum(case
                when memid = 0 then fcs.guestcost*bks.slots
    					  else fcs.membercost*bks.slots
    					  end)/3 as monthlyRevenue
          from cd.bookings bks
          inner join cd.facilities fcs
              on bks.facid = fcs.facid
          group by fcs.facid
        ) as subq
    order by name
;

-- Copying their answer on how to extract the months:
-- ** isn't working correctly **
with monthData as (
    select
        minCompleteMonth,
        maxCompleteMonth,
        (extract(year from maxCompleteMonth)*12) +
            extract(month from maxCompleteMonth) -
            (extract(year from minCompleteMonth)*12) -
            extract(month from minCompleteMonth) as numMonths
      from (
          select
              date_trunc('month',
                  (select max(starttime) from cd.bookings)) as maxCompleteMonth,
              date_trunc('month',
                  (select min(starttime) from cd.bookings)) as minCompleteMonth
            ) as subq
)
select
    name,
    initialOutlay / (monthlyRevenue - monthlyMaintenance) as repayTime
  from (
      select
          fcs.name as name,
          fcs.initialoutlay as initialOutlay,
          fcs.monthlyMaintenance as monthlyMaintenance,
          sum(case
              when memid = 0 then fcs.guestcost*bks.slots
              else fcs.membercost*bks.slots
              end)/(select numMonths from monthData) as monthlyRevenue
        from cd.bookings bks
        inner join cd.facilities fcs
            on bks.facid = fcs.facid
        where bks.starttime < (select maxCompleteMonth from monthData)
        group by fcs.facid
      ) as subq
  order by name
;

-- Their answer:
-- WHICH DOESN'T WORK EITHER
with monthdata as (
	select 	mincompletemonth,
		maxcompletemonth,
		(extract(year from maxcompletemonth)*12) +
			extract(month from maxcompletemonth) -
			(extract(year from mincompletemonth)*12) -
			extract(month from mincompletemonth) as nummonths
	from (
		select 	date_trunc('month',
				(select max(starttime) from cd.bookings)) as maxcompletemonth,
			date_trunc('month',
				(select min(starttime) from cd.bookings)) as mincompletemonth
	) as subq
)
select 	name,
	initialoutlay / (monthlyrevenue - monthlymaintenance) as repaytime

	from
		(select facs.name as name,
			facs.initialoutlay as initialoutlay,
			facs.monthlymaintenance as monthlymaintenance,
			sum(case
				when memid = 0 then slots * facs.guestcost
				else slots * membercost
			end)/(select nummonths from monthdata) as monthlyrevenue

			from cd.bookings bks
			inner join cd.facilities facs
				on bks.facid = facs.facid
			where bks.starttime < (select maxcompletemonth from monthdata)
			group by facs.facid
		) as subq
order by name;

/*
Rollingavg
====================================================================================
For each day in August 2012, calculate a rolling average of total revenue over the previous 15 days. 
Output should contain date and revenue columns, sorted by the date. Remember to account for the 
possibility of a day having zero revenue. This one's a bit tough, so don't be afraid to check out the hint!
*/

-- My anwser:
select
        date,
        avgRev from (
            -- average over this row and the 14 rows before it
            select
                    dateGen.date as date,
                    avg(revData.rev) over (order by dateGen.date rows 14 preceding) as avgRev
                from
                 -- generate a list of days so they count even if 0 revenue
                    (select 
                            cast(generate_series(timestamp '2012-07-10', '2012-08-31','1 day') as date) as date
                    ) as dateGen
                left outer join
                    (select 
                            cast(bks.starttime as date) as date,
                            sum(case
                                when memid = 0 then slots * fcs.guestcost
                                else slots * membercost
                                end) as rev
                        from cd.bookings bks
                        inner join cd.facilities fcs
                                on bks.facid = fcs.facid
                        group by cast(bks.starttime as date)
                    ) as revData
                    on dateGen.date = revData.date
        ) as subq
    where date >= '2012-08-01'
    order by date
;


/*
====================================================================================
Dates
====================================================================================
*/


/* 
Timestamp
====================================================================================
Produce a timestamp for 1 a.m. on the 31st of August 2012.
*/

-- My answer:
select '2012-08-31' + interval '1 hour' as timestamp;

-- It worked, but I was thinking too hard about it
select timestamp '2012-08-31 01:00:00';


/*
Interval
====================================================================================
Find the result of subtracting the timestamp '2012-07-30 01:00:00' from the timestamp '2012-08-31 01:00:00'
*/

-- My answer:
select (timestamp '2012-08-31 01:00:00' - timestamp '2012-07-30 01:00:00') as interval;


/*
Series
====================================================================================
Produce a list of all the dates in October 2012. They can be output as a timestamp (with time set to midnight) or a date.
*/

-- My answer:
select generate_series('2012-10-01 00:00'::timestamp, '2012-10-31 00:00', '1 day');


/*
Extract
====================================================================================
Get the day of the month from the timestamp '2012-08-31' as an integer.
*/

-- My answer:
select extract(day from timestamp '2012-08-31 00:00');


/*
Interval2
====================================================================================
Work out the number of seconds between the timestamps '2012-08-31 01:00:00' 
and '2012-09-02 00:00:00'
*/

-- My answer:
select extract(epoch from timestamp '2012-09-02 00:00:00') - extract(epoch from timestamp '2012-08-31 01:00:00');

-- This won't work outside of Postgres, will need something like this instead:
select 	extract(day from ts.int)*60*60*24 +
	extract(hour from ts.int)*60*60 + 
	extract(minute from ts.int)*60 +
	extract(second from ts.int)
	from
		(select timestamp '2012-09-02 00:00:00' - '2012-08-31 01:00:00' as int) ts


/* 
Daysinmonth
====================================================================================
For each month of the year in 2012, output the number of days in that month. 
Format the output as an integer column containing the month of the year, and a 
second column containing an interval data type.
*/

-- My answer: *I couldn't figure it out*
select
        -- generate the series of months, extract the month
        generate_series(timestamp '2012-01-01', '2012-12-31', '1 month')
        -- count the number of days in between each
;

-- Their answer:
select
        extract(month from cal.month) as month, -- Uses a window statement to create the list of months, extract the labels here
        (cal.month + interval '1 month') - cal.month as lengths -- Adds "1 month" to each of the generated dates 
                                                                -- and then subtracts it from the original month to find the overall length
    from (
        select
                generate_series(timestamp '2012-01-01', timestamp '2012-12-01', interval '1 month') as month  -- Window function that generates the list
        ) cal
    order by month
;


/*
Daysremaining
====================================================================================
For any given timestamp, work out the number of days remaining in the month. The current day 
should count as a whole day, regardless of the time. Use '2012-02-11 01:00:00' as an example 
timestamp for the purposes of making the answer. Format the output as a single interval value.
*/

-- My answer:
select
        date_trunc('month', (timestamp '2012-02-11 01:00:00' + interval '1 month')) 
        - date_trunc('day', timestamp '2012-02-11 01:00:00') as remaining
;
-- This worked, but isn't as functional as their answer because the timestamp is hardcoded

-- Their answer:
select
        (date_trunc('month', ts.testts) + interval '1 month')
        - date_trunc('day', ts.testts) as remaining
    from (
        select timestamp '2012-02-11 01:00:00' as testts
        ) ts
;


/*
Endtimes
====================================================================================
Return a list of the start and end time of the last 10 bookings (ordered by the time at which 
they end, followed by the time at which they start) in the system.
*/

-- My answer:
select 
        starttime,
        starttime + (interval '30 minutes' * slots) endtime
    from cd.bookings
    order by endtime desc, starttime desc -- forgot to order desc so that I get the most recent bookings
    limit 10 -- forgot this
;


/*
Bookingspermonth
====================================================================================
Return a count of bookings for each month, sorted by month.
*/

-- My answer:
select
        date_trunc('month', starttime) as month,
        count(date_trunc('month', starttime)) as count -- I could have just used count(*)
    from cd.bookings
    group by month
    order by month
;


/*
Utilisationpermonth
====================================================================================
Work out the utilisation percentage for each facility by month, sorted by name and month, 
rounded to 1 decimal place. Opening time is 8am, closing time is 8.30pm. You can treat 
every month as a full month, regardless of if there were some dates the club was not open.
*/

-- My answer: *didn't get it*
select
        fcs.name,
        date_trunc('month', bks.starttime) as month,
        -- number of minutes in slots / total minutes per month
        (bks.slots * 30) / 

-- Their answer:
select 
        name,
        month,
        round((100 * slots)/ -- why 100?
            cast(
                    25 * (cast((month + interval '1 month') as date)
                    - cast(month as date)) as numeric), 1
            ) as utilization
        from (
            select
                    fcs.name as name,
                    date_trunc('month', starttime) as month,
                    sum(slots) as slots
                from cd.bookings bks
                inner join cd.facilities fcs
                        on bks.facid = fcs.facid
                group by fcs.facid, month
        ) as inn
    order by name, month
;